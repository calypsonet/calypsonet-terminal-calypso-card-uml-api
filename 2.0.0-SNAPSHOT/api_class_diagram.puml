@startuml
title
    <img:../assets/logo.png>

    Terminal Calypso Card API 2.0.+ (2023-06-13)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

' -- Styles that don't work with new version of plantuml --
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' -- END --

skinparam ClassBorderThickness 2
skinparam ArrowThickness 2

' Yellow
skinparam ClassBackgroundColor #FEFECE
skinparam ClassBorderColor #D4AC0D
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

legend top
    __Colors legend__ :
    * <color:grey>WIP (work in progress...)
    * __External public API references__ :
    ** <back:yellow>**Calypsonet Terminal Reader API**</back>
end legend

package "calypso.card" as calypsoCard {

+class "**final** CalypsoApiProperties" as ApiProperties {
    +{static} **final** String VERSION
}
+enum WriteAccessLevel {
    PERSONALIZATION
    LOAD
    DEBIT
}
+enum SelectFileControl {
    FIRST_EF
    NEXT_EF
    CURRENT_DF
}
+enum GetDataTag {
    FCP_FOR_CURRENT_FILE
    FCI_FOR_CURRENT_DF
    EF_LIST
    TRACEABILITY_INFORMATION
}
package "card" as card {
    +interface "<color:blue>CalypsoCardSelectionExtensionFactory" as CalypsoCardSelectionExtensionFactory {
        +<color:blue>CalypsoCardSelectionExtension createCardSelectionExtension ()
    }
    +interface "<<<back:yellow>CardSelectionExtension</back>>>\n<color:blue>CalypsoCardSelectionExtension" as CalypsoCardSelectionExtension {
        +CalypsoCardSelectionExtension acceptInvalidatedCard ()

        +CalypsoCardSelectionExtension prepareSelectFile (short lid)
        +CalypsoCardSelectionExtension prepareSelectFile (SelectFileControl selectControl)

        +CalypsoCardSelectionExtension prepareGetData (GetDataTag tag)

        +CalypsoCardSelectionExtension prepareReadRecord (byte sfi, int recordNumber)
        +CalypsoCardSelectionExtension prepareReadBinary (byte sfi, int offset, int nbBytesToRead)
        +CalypsoCardSelectionExtension prepareReadCounter (byte sfi, int nbCountersToRead)

        +CalypsoCardSelectionExtension preparePreOpenSecureSession (WriteAccessLevel writeAccessLevel)
        +<color:grey>CalypsoCardSelectionExtension preparePreOpenSecureSessionInPkiMode ()
    }
    +interface "<<<back:yellow>IsoSmartCard</back>>>\nCalypsoCard" as CalypsoCard {
        +ProductType getProductType ()
        +boolean isHce ()

        +boolean isDfInvalidated ()

        +byte[] getDfName ()
        +byte[] getApplicationSerialNumber ()

        +byte[] getStartupInfoRawData ()
        +byte getPlatform ()
        +byte getApplicationType ()
        +byte getApplicationSubtype ()
        +byte getSoftwareIssuer ()
        +byte getSoftwareVersion ()
        +byte getSoftwareRevision ()
        +byte getSessionModification ()

        +byte[] getTraceabilityInformation ()

        +DirectoryHeader getDirectoryHeader ()
        +ElementaryFile getFileBySfi (byte sfi)
        +ElementaryFile getFileByLid (short lid)
        +Set<ElementaryFile> getFiles ()

        +boolean isDfRatified ()
        +int getTransactionCounter ()

        +boolean isPkiModeSupported ()
        +boolean isExtendedModeSupported ()
        +boolean isRatificationOnDeselectSupported ()

        +boolean isPinFeatureAvailable ()
        +boolean isPinBlocked ()
        +int getPinAttemptRemaining ()

        +boolean isSvFeatureAvailable ()
        +int getSvBalance ()
        +int getSvLastTNum ()
        +SvLoadLogRecord getSvLoadLogRecord ()
        +SvDebitLogRecord getSvDebitLogLastRecord ()
        +List<SvDebitLogRecord> getSvDebitLogAllRecords ()
    }
    +interface DirectoryHeader {
        +short getLid ()
        +Byte getDfStatus ()

        +byte[] getAccessConditions ()
        +byte[] getKeyIndexes ()

        +byte getKif (WriteAccessLevel writeAccessLevel)
        +byte getKvc (WriteAccessLevel writeAccessLevel)
    }
    +interface ElementaryFile {
        +byte getSfi ()
        +FileHeader getHeader ()
        +FileData getData ()
    }
    +interface FileHeader {
        +short getLid ()
        +byte getDfStatus ()
        +ElementaryFile.Type getEfType ()

        +int getRecordsNumber ()
        +int getRecordSize ()

        +byte[] getAccessConditions ()
        +byte[] getKeyIndexes ()

        +Short getSharedReference ()
    }
    +enum "Type" as FileType {
        LINEAR
        BINARY
        CYCLIC
        COUNTERS
        SIMULATED_COUNTERS
    }
    +interface FileData {
        +byte[] getContent ()
        +byte[] getContent (int numRecord)
        +byte[] getContent (int numRecord, int dataOffset, int dataLength)
        +SortedMap<Integer, byte[]> getAllRecordsContent ()

        +Integer getContentAsCounterValue (int numCounter)
        +SortedMap<Integer, Integer> getAllCountersValue ()
    }
    +enum "ProductType" as CardProductType {
        PRIME_REVISION_1
        PRIME_REVISION_2
        PRIME_REVISION_3
        LIGHT
        BASIC
        UNKNOWN
    }
    +interface SvLoadLogRecord {
        +byte[] getRawData ()

        +byte[] getLoadDate ()
        +byte[] getLoadTime ()

        +int getAmount ()
        +int getBalance ()
        +byte[] getFreeData ()

        +byte getKvc ()
        +byte[] getSamId ()
        +int getSamTNum ()
        +int getSvTNum ()
    }
    +interface SvDebitLogRecord {
        +byte[] getRawData ()

        +byte[] getDebitDate ()
        +byte[] getDebitTime ()

        +int getAmount ()
        +int getBalance ()

        +byte getKvc ()
        +byte[] getSamId ()
        +int getSamTNum ()
        +int getSvTNum ()
    }
}
package "transaction" as transaction {
    +interface "<color:blue>CCTransactionManagerFactory" as CCTransactionManagerFactory {
        +<color:blue>CCFreeTransactionManager createFreeTransactionManager (<back:yellow>CardReader</back> cardReader, CalypsoCard card)
        +<color:blue>CCSecureStandardModeTransactionManager createSecureStandardModeTransactionManager (<back:yellow>CardReader</back> cardReader, CalypsoCard card, SymmetricCryptoSecuritySetting securitySetting)
        +<color:blue>CCSecureExtendedModeTransactionManager createSecureExtendedModeTransactionManager (<back:yellow>CardReader</back> cardReader, CalypsoCard card, SymmetricCryptoSecuritySetting securitySetting)
        +<color:blue>CCSecurePkiModeTransactionManager createSecurePkiModeTransactionManager (<back:yellow>CardReader</back> cardReader, CalypsoCard card, AsymmetricCryptoSecuritySetting securitySetting)
    }
    ' Card
    together {
        +interface "<color:blue>CCTransactionManager" as CCTransactionManager<T extends CCTransactionManager<T>> {
            +T prepareSelectFile (short lid)
            +T prepareSelectFile (SelectFileControl selectFileControl)

            +T prepareGetData (GetDataTag tag)

            +T prepareReadRecord (byte sfi, int recordNumber)
            +T prepareReadRecords (byte sfi, int fromRecordNumber, int toRecordNumber, int recordSize)
            +T prepareReadRecordsPartially (byte sfi, int fromRecordNumber, int toRecordNumber, int offset, int nbBytesToRead)
            +T prepareReadBinary (byte sfi, int offset, int nbBytesToRead)
            +T prepareReadCounter (byte sfi, int nbCountersToRead)

            +T prepareSearchRecords (SearchCommandData data)

            +T prepareCheckPinStatus ()

            +T prepareAppendRecord (byte sfi, byte[] recordData)
            +T prepareUpdateRecord (byte sfi, int recordNumber, byte[] recordData)
            +T prepareWriteRecord (byte sfi, int recordNumber, byte[] recordData)

            +T prepareUpdateBinary (byte sfi, int offset, byte[] data)
            +T prepareWriteBinary (byte sfi, int offset, byte[] data)

            +T prepareIncreaseCounter (byte sfi, int counterNumber, int incValue)
            +T prepareIncreaseCounters (byte sfi, Map<Integer, Integer> counterNumberToIncValueMap)
            +T prepareDecreaseCounter (byte sfi, int counterNumber, int decValue)
            +T prepareDecreaseCounters (byte sfi, Map<Integer, Integer> counterNumberToDecValueMap)
            +T prepareSetCounter (byte sfi, int counterNumber, int newValue)

            +T prepareSvReadAllLogs ()

            +T prepareVerifyPin (byte[] pin)
            +T prepareChangePin (byte[] newPin)

            +T processCommands (boolean closePhysicalChannel)

            +List<byte[]> getTransactionAuditData ()
        }
        +interface "<color:blue>CCFreeTransactionManager" as CCFreeTransactionManager extends CCTransactionManager {
        }
        +interface "<color:blue>CCSecureTransactionManager" as CCSecureTransactionManager<T extends CCSecureTransactionManager<T>> extends CCTransactionManager {
            +<color:blue><E extends CCTransactionCryptoExtension> E getCryptoExtension (Class<E> cryptoExtensionClass)

            +T prepareCloseSecureSession ()
            +T prepareCancelSecureSession ()
        }
        +interface "<color:blue>CCSecureSymmetricCryptoTransactionManager" as CCSecureSymmetricCryptoTransactionManager<T extends CCSecureSymmetricCryptoTransactionManager<T>> extends CCSecureTransactionManager {
            +T prepareOpenSecureSession (WriteAccessLevel writeAccessLevel)

            +T prepareSvGet (SvOperation svOperation, SvAction svAction)
            +T prepareSvReload (int amount, byte[] date, byte[] time, byte[] free)
            +T prepareSvReload (int amount)
            +T prepareSvDebit (int amount, byte[] date, byte[] time)
            +T prepareSvDebit (int amount)

            +T prepareInvalidate ()
            +T prepareRehabilitate ()

            +T prepareChangeKey (int keyIndex, byte newKif, byte newKvc, byte issuerKif, byte issuerKvc)

            +<color:blue>void initCryptoContextForNextTransaction ()
        }
        +interface "<color:blue>CCSecureStandardModeTransactionManager" as CCSecureStandardModeTransactionManager extends CCSecureSymmetricCryptoTransactionManager {
        }
        +interface "<color:blue>CCSecureExtendedModeTransactionManager" as CCSecureExtendedModeTransactionManager extends CCSecureSymmetricCryptoTransactionManager {
            +CCSecureExtendedModeTransactionManager prepareEarlyMutualAuthentication ()
            +CCSecureExtendedModeTransactionManager prepareActivateEncryption ()
            +CCSecureExtendedModeTransactionManager prepareDeactivateEncryption ()
        }
        +interface "<color:blue>CCSecurePkiModeTransactionManager" as CCSecurePkiModeTransactionManager extends CCSecureTransactionManager {
            +<color:blue>CCSecurePkiModeTransactionManager prepareOpenSecureSession ()
        }
    }
    +enum SvOperation {
        RELOAD
        DEBIT
    }
    +enum SvAction {
        DO
        UNDO
    }
    +interface "<color:blue>CCSecuritySettingFactory" as CCSecuritySettingFactory {
        +<color:blue>SymmetricCryptoSecuritySetting createSymmetricCryptoSecuritySetting (SymmetricCryptoTransactionManagerFactory cryptoTransactionManagerFactory)
        +<color:blue>AsymmetricCryptoSecuritySetting createAsymmetricCryptoSecuritySetting (AsymmetricCryptoTransactionManagerFactory cryptoTransactionManagerFactory)
    }
    +interface "<color:grey>AsymmetricCryptoSecuritySetting" as AsymmetricCryptoSecuritySetting {
        +<color:grey>AsymmetricCryptoSecuritySetting setAuthorityPublicKey (byte[] publicKey)
        +<color:grey>AsymmetricCryptoSecuritySetting setAuthorityCertificate (X509Certificate certificate)
        +<color:grey>AsymmetricCryptoSecuritySetting enableUnsignedPublicKeyUsage ()
    }
    +interface "<color:blue>SymmetricCryptoSecuritySetting" as SymmetricCryptoSecuritySetting {
        +SymmetricCryptoSecuritySetting enableMultipleSession ()
        +SymmetricCryptoSecuritySetting enableRatificationMechanism ()
        +SymmetricCryptoSecuritySetting enablePinPlainTransmission ()
        +SymmetricCryptoSecuritySetting enableSvLoadAndDebitLog ()
        +SymmetricCryptoSecuritySetting authorizeSvNegativeBalance ()
        +SymmetricCryptoSecuritySetting disableReadOnSessionOpening ()

        +SymmetricCryptoSecuritySetting assignKif (WriteAccessLevel writeAccessLevel, byte kvc, byte kif)
        +SymmetricCryptoSecuritySetting assignDefaultKif (WriteAccessLevel writeAccessLevel, byte kif)
        +SymmetricCryptoSecuritySetting assignDefaultKvc (WriteAccessLevel writeAccessLevel, byte kvc)

        +SymmetricCryptoSecuritySetting addAuthorizedSessionKey (byte kif, byte kvc)
        +SymmetricCryptoSecuritySetting addAuthorizedSvKey (byte kif, byte kvc)

        +SymmetricCryptoSecuritySetting setPinVerificationCipheringKey (byte kif, byte kvc)
        +SymmetricCryptoSecuritySetting setPinModificationCipheringKey (byte kif, byte kvc)
    }
    +interface "<color:blue>CCCommandDataFactory" as CCCommandDataFactory {
        +<color:blue>SearchCommandData createSearchCommandData ()
    }
    +interface SearchCommandData {
        +SearchCommandData setSfi (byte sfi)
        +SearchCommandData startAtRecord (int recordNumber)
        +SearchCommandData setOffset (int offset)
        +SearchCommandData enableRepeatedOffset ()
        +SearchCommandData setSearchData (byte[] data)
        +SearchCommandData setMask (byte[] mask)
        +SearchCommandData fetchFirstMatchingResult ()

        +List<Integer> getMatchingRecordNumbers ()
    }
    ' Exceptions
    +class "<<RuntimeException>>" as RuntimeException {
        +**SessionBufferOverflowException**: Session buffer would overflow for atomic session.
        +**UnauthorizedKeyException**
        +**CardRevokedException**
        +**InconsistentDataException**: Number of R-APDUs != number of C-APDUs **or** data read in session != data read outside session.
        +<color:blue>**InvalidCardMacException**
        +<color:blue>**CardMacNotVerifiableException**: CloseSecureSession is successful but crypto resource is no more available to check the card MAC.
        +**SelectFileException**
        +**UnexpectedCommandStatusException**
        +**ReaderIOException**: Card reader and/or Crypto reader communication is broken.
        +**CardIOException**
        +<color:blue>**CryptoIOException**
    }
    package "spi" as spi {
        +interface "<color:blue>AsymmetricCryptoTransactionManagerFactory" as AsymmetricCryptoTransactionManagerFactory {
        }
        +interface "<color:blue>SymmetricCryptoTransactionManagerFactory" as SymmetricCryptoTransactionManagerFactory {
        }
        +interface "<color:blue>CCTransactionCryptoExtension" as CCTransactionCryptoExtension {
        }
    }
}

}

' Associations

CCTransactionManagerFactory ..> CalypsoCard #C_USE : use >
CCTransactionManagerFactory ..> SymmetricCryptoSecuritySetting #C_USE : use >
CCTransactionManagerFactory ..> AsymmetricCryptoSecuritySetting #C_USE : use >

CCTransactionManagerFactory .up.> CCFreeTransactionManager #C_LINK : provide >
CCTransactionManagerFactory .up.> CCSecureStandardModeTransactionManager #C_LINK : provide >
CCTransactionManagerFactory .up.> CCSecureExtendedModeTransactionManager #C_LINK : provide >
CCTransactionManagerFactory .up.> CCSecurePkiModeTransactionManager #C_LINK : provide >

CCTransactionManager ..> SelectFileControl #C_USE : use >
CCTransactionManager ..> GetDataTag #C_USE : use >
CCTransactionManager .up.> SvOperation #C_USE : use >
CCTransactionManager .up.> SvAction #C_USE : use >
CCTransactionManager .up.> SearchCommandData #C_USE : use >

CCSecureTransactionManager ..> WriteAccessLevel #C_USE : use >
CCSecureTransactionManager ..> CCTransactionCryptoExtension #C_LINK : provide >

CCSecuritySettingFactory .up.> SymmetricCryptoSecuritySetting #C_LINK : provide >
CCSecuritySettingFactory .up.> AsymmetricCryptoSecuritySetting #C_LINK : provide >

CCSecuritySettingFactory ..> SymmetricCryptoTransactionManagerFactory #C_USE : use >
CCSecuritySettingFactory ..> AsymmetricCryptoTransactionManagerFactory #C_USE : use >

SymmetricCryptoSecuritySetting .right.> WriteAccessLevel #C_USE : use >

CCCommandDataFactory .left.> SearchCommandData #C_LINK : provide >

CalypsoCardSelectionExtensionFactory .left.> CalypsoCardSelectionExtension #C_LINK : provide >

CalypsoCardSelectionExtension .up.> SelectFileControl #C_USE : use >
CalypsoCardSelectionExtension .up.> GetDataTag #C_USE : use >
CalypsoCardSelectionExtension .left.> WriteAccessLevel #C_USE : use >

CalypsoCard ..> DirectoryHeader #C_LINK : provide >
CalypsoCard ..> ElementaryFile #C_LINK : provide >
CalypsoCard +-- CardProductType
CalypsoCard ..> CardProductType #C_LINK : provide >
CalypsoCard ..> SvLoadLogRecord #C_LINK : provide >
CalypsoCard ..> SvDebitLogRecord #C_LINK : provide >

DirectoryHeader .up.> WriteAccessLevel #C_USE : use >

ElementaryFile +-- FileType
ElementaryFile ..> FileHeader #C_LINK : provide >
ElementaryFile ..> FileData #C_LINK : provide >

FileHeader .left.> FileType #C_LINK : provide >

' == LAYOUT ==

'CalypsoCardSelectionExtension -[hidden]left- CalypsoCard

AsymmetricCryptoTransactionManagerFactory -[hidden]- RuntimeException

' == STYLE ==

package calypsoCard #C_GREY1 {}
package calypsoCard.card #C_GREY2 {}
package calypsoCard.transaction #C_GREY2 {}
package calypsoCard.transaction.spi #C_GREY3 {}

interface calypsoCard.card.CalypsoCardSelectionExtensionFactory <<red>>
interface calypsoCard.transaction.CCSecuritySettingFactory <<red>>
interface calypsoCard.transaction.CCTransactionManagerFactory <<red>>
interface calypsoCard.transaction.CCCommandDataFactory <<red>>

interface calypsoCard.transaction.CCTransactionManager <<blue>>
interface calypsoCard.transaction.CCFreeTransactionManager <<blue>>
interface calypsoCard.transaction.CCSecureTransactionManager <<blue>>
interface calypsoCard.transaction.CCSecureSymmetricCryptoTransactionManager <<blue>>
interface calypsoCard.transaction.CCSecureStandardModeTransactionManager <<blue>>
interface calypsoCard.transaction.CCSecureExtendedModeTransactionManager <<blue>>
interface calypsoCard.transaction.CCSecurePkiModeTransactionManager <<blue>>

interface calypsoCard.card.CalypsoCardSelectionExtension <<green>>

@enduml